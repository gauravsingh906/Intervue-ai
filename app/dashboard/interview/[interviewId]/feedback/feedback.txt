'use client'
// Enhanced Feedback component with PDF export capability
import { useRef } from 'react'
import { useParams } from 'next/navigation'
import { db } from '@/utils/db'
import { UserAnswer } from '@/utils/schema'

import { eq } from 'drizzle-orm'
import React, { useEffect, useState } from 'react'
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"
import { 
  AlertCircle, 
  Award, 
  ChevronsUpDown, 
  Home, 
  Printer,
  Star, 
  ThumbsUp, 
  TrendingUp 
} from 'lucide-react'
import { useRouter } from 'next/navigation'
import { Progress } from "@/components/ui/progress"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Toaster } from 'react-hot-toast'
import { Button } from '@/components/ui/button'
import { GeneratePDFButton } from '@/app/dashboard/_components/GeneratePDFButton'

function Feedback() {
  const [feedbackList, setFeedbackList] = useState([]);
  const [overallScore, setOverallScore] = useState(0);
  const [strengths, setStrengths] = useState([]);
  const [weaknesses, setWeaknesses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("answers");
  const router = useRouter();
  
  // Create a ref for the content we want to export as PDF
  const feedbackContentRef = useRef(null);

  // Correct way to get route parameters in Next.js 13+
  const params = useParams();
  const interviewId = params.interviewId; 

  useEffect(() => {
    GetFeedback();
  }, []);

  const GetFeedback = async () => {
    try {
      setLoading(true);
      const result = await db
        .select()
        .from(UserAnswer)
        .where(eq(UserAnswer.mockIdRef, interviewId)) // Use interviewId from useParams
        .orderBy(UserAnswer.id);

      // Enhanced data with mock strengths and weaknesses
      const enhancedResult = result.map(item => ({
        ...item,
        categoryStrength: ["Communication", "Technical Knowledge", "Problem Solving", "Experience"][Math.floor(Math.random() * 4)],
        categoryWeakness: ["Conciseness", "Specific Examples", "Structured Approach", "Technical Depth"][Math.floor(Math.random() * 4)],
        timeToAnswer: Math.floor(Math.random() * 120) + 30 // Random time between 30-150 seconds
      }));

      setFeedbackList(enhancedResult);
      
      // Calculate overall score based on ratings
      if (enhancedResult.length > 0) {
        const totalScore = enhancedResult.reduce((sum, item) => sum + item.rating, 0);
        setOverallScore(Math.round((totalScore / (enhancedResult.length * 10)) * 100));
      }
      
      // Extract strengths and weaknesses
      const strengthsMap = new Map();
      const weaknessesMap = new Map();
      
      enhancedResult.forEach(item => {
        if (item.categoryStrength) {
          strengthsMap.set(item.categoryStrength, (strengthsMap.get(item.categoryStrength) || 0) + 1);
        }
        if (item.categoryWeakness) {
          weaknessesMap.set(item.categoryWeakness, (weaknessesMap.get(item.categoryWeakness) || 0) + 1);
        }
      });
      
      setStrengths(Array.from(strengthsMap.entries()).map(([category, count]) => ({ category, count })));
      setWeaknesses(Array.from(weaknessesMap.entries()).map(([category, count]) => ({ category, count })));
      
    } catch (error) {
      console.error("Error fetching feedback:", error);
    } finally {
      setLoading(false);
    }
  }

  const getScoreColor = (score) => {
    if (score >= 80) return "text-green-600";
    if (score >= 60) return "text-yellow-600";
    return "text-red-600";
  }

  const getScoreBadge = (rating) => {
    const percentage = (rating / 10) * 100;
    if (percentage >= 80) return <Badge className="bg-green-500">Excellent</Badge>;
    if (percentage >= 70) return <Badge className="bg-green-400">Good</Badge>;
    if (percentage >= 60) return <Badge className="bg-yellow-500">Satisfactory</Badge>;
    if (percentage >= 50) return <Badge className="bg-orange-500">Needs Improvement</Badge>;
    return <Badge className="bg-red-500">Poor</Badge>;
  }

  // Format the current date for the PDF
  const getFormattedDate = () => {
    const date = new Date();
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
      </div>
    );
  }
    return (
    <div className='p-4 md:p-10 max-w-7xl mx-auto'>
      <Toaster />
      
      {feedbackList?.length === 0 ? (
        <Card>
          <CardHeader>
            <CardTitle className='text-xl text-gray-700'>No Interview Feedback Available</CardTitle>
            <CardDescription>Your interview feedback will appear here once it's been processed.</CardDescription>
          </CardHeader>
          <CardFooter>
            <Button onClick={() => router.replace('/dashboard')} className="flex items-center gap-2">
              <Home className="h-4 w-4" /> Return to Dashboard
            </Button>
          </CardFooter>
        </Card>
      ) : (
        <>
          {/* PDF export content wrapper */}
          <div ref={feedbackContentRef} className="space-y-8 bg-white p-6 rounded-lg">
            {/* PDF Header (only visible in PDF) */}
            <div className="flex justify-between items-center border-b pb-4 mb-6">
              <div>
                <h1 className="text-2xl font-bold text-gray-800">Interview Feedback Report</h1>
                <p className="text-gray-500">Generated on: {getFormattedDate()}</p>
              </div>
              <div className="text-right">
                <p className="font-medium">Interview ID: {params.interviewId}</p>
                <p className="text-gray-500">Questions: {feedbackList.length}</p>
              </div>
            </div>
            
            {/* Header with congratulations */}
            <div className="text-center space-y-2">
              <div className="inline-flex items-center justify-center p-2 bg-green-100 rounded-full mb-2">
                <Award className="h-8 w-8 text-green-600" />
              </div>
              <h1 className='text-3xl font-bold text-green-600'>Congratulations!</h1>
              <p className='text-gray-600'>You've completed your interview. Here's your personalized feedback.</p>
            </div>

            {/* Overall Score Card */}
            <Card className="border-2 border-primary/20">
              <CardHeader>
                <CardTitle className="flex justify-between items-center">
                  <span>Overall Performance</span>
                  <span className={`text-3xl font-bold ${getScoreColor(overallScore)}`}>{overallScore}%</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Progress value={overallScore} className="h-3" />
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Alert variant="default" className="bg-green-50 border-green-200">
                    <ThumbsUp className="h-4 w-4 text-green-600" />
                    <AlertTitle>Strengths</AlertTitle>
                    <AlertDescription>
                      <ul className="list-disc pl-5 mt-2 space-y-1">
                        {strengths.slice(0, 3).map((item, idx) => (
                          <li key={idx} className="text-sm">{item.category}</li>
                        ))}
                      </ul>
                    </AlertDescription>
                  </Alert>

                  <Alert variant="default" className="bg-amber-50 border-amber-200">
                    <AlertCircle className="h-4 w-4 text-amber-600" />
                    <AlertTitle>Areas for Improvement</AlertTitle>
                    <AlertDescription>
                      <ul className="list-disc pl-5 mt-2 space-y-1">
                        {weaknesses.slice(0, 3).map((item, idx) => (
                          <li key={idx} className="text-sm">{item.category}</li>
                        ))}
                      </ul>
                    </AlertDescription>
                  </Alert>
                </div>
              </CardContent>
            </Card>

            {/* Analytics Summary - visible in both UI and PDF */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Performance</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-primary">{overallScore}%</div>
                  <p className="text-xs text-gray-500 mt-1">Overall interview score</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Questions</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-primary">{feedbackList.length}</div>
                  <p className="text-xs text-gray-500 mt-1">Total questions answered</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Avg. Response Time</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold text-primary">
                    {Math.round(feedbackList.reduce((sum, item) => sum + (item.timeToAnswer || 0), 0) / feedbackList.length)}s
                  </div>
                  <p className="text-xs text-gray-500 mt-1">Average time per question</p>
                </CardContent>
              </Card>
            </div>
           
           
            
            {/* Recommendations Card */}
            <Card className="bg-blue-50 border-blue-200">
              <CardHeader>
                <CardTitle className="text-blue-800">Key Recommendations</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {weaknesses.slice(0, 3).map((weakness, idx) => (
                    <li key={idx} className="text-blue-800">
                      <strong>Improve {weakness.category}:</strong> {" "}
                      {weakness.category === "Conciseness" && "Practice delivering your answers more concisely while maintaining essential details."}
                      {weakness.category === "Specific Examples" && "Prepare more concrete examples from your past experience to illustrate your skills."}
                      {weakness.category === "Structured Approach" && "Use frameworks like STAR (Situation, Task, Action, Result) to structure your answers."}
                      {weakness.category === "Technical Depth" && "Review technical concepts and be prepared to explain them in more detail."}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </div>
           
            {/* Detailed Feedback Section */}
         
            <div>
              <h2 className='text-lg font-medium mb-4'>Detailed Question Feedback</h2>
              {feedbackList.map((item, index) => (
                <Collapsible key={index} className='mb-4 border rounded-lg overflow-hidden' defaultOpen={index === 0}>
                  <CollapsibleTrigger className='p-4 flex justify-between items-center w-full hover:bg-gray-50 transition-colors text-left'>
                    <div className="flex items-center gap-3">
                      <span className="flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary/10 text-sm font-medium text-primary">
                        {index + 1}
                      </span>
                      <div className="flex-1">
                        <h3 className="font-medium">{item.question}</h3>
                        <div className="flex items-center gap-2 mt-1">
                          {getScoreBadge(item.rating)}
                          <span className="text-xs text-gray-500">Rating: {item.rating}/10</span>
                        </div>
                      </div>
                    </div>
                    <ChevronsUpDown className='h-5 w-5 text-gray-500' />
                  </CollapsibleTrigger>
                  <CollapsibleContent className="border-t">
                    <div className='grid gap-4 p-4'>
                      <div className='p-3 rounded-lg bg-blue-50 border border-blue-100'>
                        <h4 className='font-semibold text-blue-800 mb-1'>Your Answer</h4>
                        <p className='text-sm text-blue-900'>{item.userAns}</p>
                      </div>
                      
                      <div className='p-3 rounded-lg bg-green-50 border border-green-100'>
                        <h4 className='font-semibold text-green-800 mb-1'>Model Answer</h4>
                        <p className='text-sm text-green-900'>{item.correctAns}</p>
                      </div>
                      
                      <div className='p-3 rounded-lg bg-purple-50 border border-purple-100'>
                        <h4 className='font-semibold text-purple-800 mb-1'>Personalized Feedback</h4>
                        <p className='text-sm text-purple-900'>{item.feedback}</p>
                      </div>

                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-2">
                        <div className="p-3 rounded-lg bg-amber-50 border border-amber-100">
                          <h4 className="font-semibold text-amber-800 mb-1">Area for Improvement</h4>
                          <p className="text-sm text-amber-900">{item.categoryWeakness}</p>
                        </div>
                        <div className="p-3 rounded-lg bg-emerald-50 border border-emerald-100">
                          <h4 className="font-semibold text-emerald-800 mb-1">Strength Demonstrated</h4>
                          <p className="text-sm text-emerald-900">{item.categoryStrength}</p>
                        </div>
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              ))}
            </div>
          
          {/* Action Buttons - Only visible in UI (not in PDF) */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
            <Button onClick={() => router.replace('/dashboard')} className="flex items-center gap-2">
              <Home className="h-4 w-4" /> Return to Dashboard
            </Button>
            <GeneratePDFButton 
              contentRef={feedbackContentRef} 
              fileName={`interview-feedback-${params.interviewId}.pdf`} 
            />
          </div>
        </>
      )}
    </div>
  )
}

export default Feedback